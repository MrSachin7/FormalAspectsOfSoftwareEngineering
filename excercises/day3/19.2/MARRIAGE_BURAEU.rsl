scheme MARRIAGE_BURAEU = 
    class 
        type 
            Woman,
            Man,
            Couple = Woman >< Man,
            Woman_Table = Woman-set,
            Man_Table = Man-set,
            Couple_Table = Couple-set,
            Data = Woman_Table >< Man_Table >< Couple_Table,
            Database = {| data : Data :- is_wff(data) |}

        value
            is_wff: Data -> Bool
            is_wff((womens , mans, couples)) is
                (

                    all (woman, man) : Couple :- 
                        (woman, man) isin couples => /* The couple that are in the database must satisfy :*/
                        woman ~isin womens \/   /* womens cant be in the womens table*/
                        man ~isin mans \/       /* mens cant be in the mens table*/
                        (
                            all (anotherWoman, anotherMan) : Couple :- 
                                (anotherWoman, anotherMan) isin couples  /\ (anotherWoman, anotherMan) ~= (woman, man) => /* For a different record in database */
                                    anotherWoman ~= woman /\ anotherMan ~= man /* The couple must be different i.e the database holds no duplicate*/
                        )
                ),
        
            is_married: Woman >< Database -> Bool
            is_married (woman, (womanTable, manTable, coupleTable)) is
                (exists man: Man :- (woman, man) isin coupleTable),
                
            is_married: Man >< Database -> Bool
            is_married (man, (womanTable, manTable, coupleTable)) is
                (exists woman: Woman :- (woman, man) isin coupleTable),

            register_woman: Woman >< Database -~-> Database
            register_woman (woman, (womanTable, manTable, coupleTable)) is
                (womanTable union {woman}, manTable, coupleTable)
                pre woman ~isin womanTable /\ ~is_married(woman, (womanTable, manTable, coupleTable)),

            register_man : Man >< Database -~-> Database
            register_man (man, (womanTable, manTable, coupleTable)) is
                (womanTable, manTable union {man}, coupleTable)
                pre man ~isin manTable /\ ~is_married(man, (womanTable, manTable, coupleTable)),

            marry: Woman >< Man >< Database -~-> Database
            marry (woman, man, (womanTable, manTable, coupleTable)) is
                (womanTable \ {woman}, manTable \ {man}, coupleTable union {(woman, man)})
                pre man isin manTable /\ woman isin womanTable
    end


            
